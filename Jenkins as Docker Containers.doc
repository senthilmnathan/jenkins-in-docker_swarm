Message-ID: <575997444.37496.1570351071224.JavaMail.root@dub-vm-confwiki-01.iconcr.com>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_37495_1312434814.1570351071222"

------=_Part_37495_1312434814.1570351071222
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>05 - Jenkins as Docker Containers</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>05 - Jenkins as Docker Containers</h1>
    <div class=3D"Section1">
        <p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1570351070842 {padding: 0px;}
div.rbtoc1570351070842 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1570351070842 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1570351070842">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-Introduction">Introduction<=
/a></li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-Background">Background</a><=
/li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-DeploymentArchitecture">Dep=
loyment Architecture</a></li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-DockerSwarm">Docker Swarm</=
a></li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-Propertyfile">Property file=
</a></li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-CustomDockerImage">Custom D=
ocker Image</a></li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-LocalDockerRegistry">Local =
Docker Registry</a></li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-Terraform">Terraform</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-TerraformModule">Terraform =
Module</a></li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-TerraformvariableFile:">Ter=
raform variable File:</a></li>=20
</ul> </li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-DockerService">Docker Servi=
ce</a></li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-DockerContainer">Docker Con=
tainer</a></li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-DockerVolume">Docker Volume=
</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-DatapersistenceacrossSwarm"=
>Data persistence across Swarm</a></li>=20
</ul> </li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-VisualizationContainer">Vis=
ualization Container</a></li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-BuildingAnInstance">Buildin=
g An Instance</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-deployer.sh">deployer.sh</a=
></li>=20
</ul> </li>=20
<li><a href=3D"#id-05-JenkinsasDockerContainers-NextPhase">Next Phase</a></=
li>=20
</ul>=20
</div>
<p></p>
<h1 id=3D"id-05-JenkinsasDockerContainers-Introduction">Introduction</h1>
<p>This page explains in detail, the new dockers based Jenkins instances su=
pported by middleware team. The setup comprise of Docker Swarm which manage=
 multiple Jenkins instances as docker services. The docker service themselv=
es are managed pro grammatically using terraform. The interaction between t=
he middleware administrator and the underlying Jenkins containers are only =
through terraform code which makes API calls to the docker services to mana=
ge both the container's state as well as configuration. For any questions o=
r clarifications, reach out to Middleware Team DL (<a href=3D"mailto:IPLC-I=
T-Global-Operations-Middleware@iconplc.com" class=3D"external-link" rel=3D"=
nofollow">IPLC-IT-Global-Operations-Middleware@iconplc.com</a>)</p>
<h1 id=3D"id-05-JenkinsasDockerContainers-Background">Background</h1>
<p>Jenkins is the standard build server used within ICON and middleware tea=
m gets frequent requests to troubleshoot issues with instances already inst=
alled by the developers. By the team the issue reaches middleware team, the=
 instance itself becomes a huge, unwieldy and vulnerable application with l=
ittle scope for performance optimization. In addition to this, the team als=
o gets several requests to install dedicated Jenkins environments for each =
projects which if implemented by a traditional approach would mean expendin=
g tens of VM guest machines just to run these Jenkins environments. It goes=
 without saying that the CPU and Memory utilization will be much lower most=
 times across these machines. To over come all these issues, it was decided=
 to setup a containerized version of Jenkins and spawn these containers acr=
oss a limited set of VM guest nodes.&nbsp;</p>
<h1 id=3D"id-05-JenkinsasDockerContainers-DeploymentArchitecture">Deploymen=
t Architecture</h1>
<p>The overall architecture of the Jenkins environment is show below. The s=
etup comprises of</p>
<ul>
<li>Three VM Guest nodes which run the containers</li>
<li>Docker Swarm, comprising of a single master node and two worker nodes</=
li>
<li>A local custom Docker Registry to manage the images</li>
<li>Terraform installed on the master node to manage the docker swarm</li>
<li>A series of Bash scripts which acts as interface between the required J=
enkins configurations defined for the project and the terraform modules</li=
>
<li>A single property file which is the only place all Jenkins configuratio=
ns are maintained (including plugin updates)&nbsp;</li>
</ul>
<p>&nbsp;<span class=3D"confluence-embedded-file-wrapper image-center-wrapp=
er"><img class=3D"confluence-embedded-image image-center" src=3D"/download/=
attachments/37487965/image2019-9-23_14-52-29.png?version=3D1&amp;modificati=
onDate=3D1569230549000&amp;api=3Dv2" data-image-src=3D"/download/attachment=
s/37487965/image2019-9-23_14-52-29.png?version=3D1&amp;modificationDate=3D1=
569230549000&amp;api=3Dv2" data-unresolved-comment-count=3D"0" data-linked-=
resource-id=3D"37487969" data-linked-resource-version=3D"1" data-linked-res=
ource-type=3D"attachment" data-linked-resource-default-alias=3D"image2019-9=
-23_14-52-29.png" data-base-url=3D"https://icon-confluence.iconcr.com" data=
-linked-resource-content-type=3D"image/png" data-linked-resource-container-=
id=3D"37487965" data-linked-resource-container-version=3D"9"></span></p>
<p>The entire cycle from configuration definition to spawning of container =
is given here. Except for creating the project specific property file and e=
xecuting the bash script, all these steps are performed automatically.</p>
<p><span class=3D"confluence-embedded-file-wrapper image-center-wrapper"><i=
mg class=3D"confluence-embedded-image image-center" src=3D"/download/attach=
ments/37487965/image2019-9-23_15-3-16.png?version=3D1&amp;modificationDate=
=3D1569231196000&amp;api=3Dv2" data-image-src=3D"/download/attachments/3748=
7965/image2019-9-23_15-3-16.png?version=3D1&amp;modificationDate=3D15692311=
96000&amp;api=3Dv2" data-unresolved-comment-count=3D"0" data-linked-resourc=
e-id=3D"37487970" data-linked-resource-version=3D"1" data-linked-resource-t=
ype=3D"attachment" data-linked-resource-default-alias=3D"image2019-9-23_15-=
3-16.png" data-base-url=3D"https://icon-confluence.iconcr.com" data-linked-=
resource-content-type=3D"image/png" data-linked-resource-container-id=3D"37=
487965" data-linked-resource-container-version=3D"9"></span></p>
<p>All the components are explained in detail in the following sections.</p=
>
<h1 id=3D"id-05-JenkinsasDockerContainers-DockerSwarm">Docker Swarm</h1>
<p>Currently, there are 3 Linux servers which are used to host Jenkins. The=
y are&nbsp;</p>
<ul>
<li>eu-jenkinp-a001</li>
<li>eu-jenkinp-a002</li>
<li>eu-jenkinp-a003</li>
</ul>
<p>A docker swarm is created using these three nodes, with&nbsp;eu-jenkinp-=
a002 acting as Swarm master node. All the build scripts and docker registry=
 are hosted in this node.</p>
<h1 id=3D"id-05-JenkinsasDockerContainers-Propertyfile">Property file</h1>
<p>This is the first step in creating the Jenkins container. The property f=
ile is prepared by the middleware administrator based on requirements from =
project team which requested the environment. This file contains rudimentar=
y information like</p>
<ul>
<li>List of packages to be installed</li>
<li>List of plugins to be installed</li>
<li>Admin user password</li>
<li>Contact Email ID</li>
</ul>
<p>Over time, this file will be expanded to include additional requirements=
. A sample file typically looks like this.</p>
<p><span class=3D"confluence-embedded-file-wrapper image-center-wrapper"><i=
mg class=3D"confluence-embedded-image image-center" src=3D"/download/attach=
ments/37487965/image2019-9-24_15-9-22.png?version=3D1&amp;modificationDate=
=3D1569317962000&amp;api=3Dv2" data-image-src=3D"/download/attachments/3748=
7965/image2019-9-24_15-9-22.png?version=3D1&amp;modificationDate=3D15693179=
62000&amp;api=3Dv2" data-unresolved-comment-count=3D"0" data-linked-resourc=
e-id=3D"37488139" data-linked-resource-version=3D"1" data-linked-resource-t=
ype=3D"attachment" data-linked-resource-default-alias=3D"image2019-9-24_15-=
9-22.png" data-base-url=3D"https://icon-confluence.iconcr.com" data-linked-=
resource-content-type=3D"image/png" data-linked-resource-container-id=3D"37=
487965" data-linked-resource-container-version=3D"9"></span></p>
<h1 id=3D"id-05-JenkinsasDockerContainers-CustomDockerImage">Custom Docker =
Image</h1>
<p>For each Jenkins instance, a custom docker image is created in order to =
better manage the configurations pertaining to it. The docker image is crea=
ted by a shell script which reads the property file as input. Using the inf=
ormation from the file, a custom image is created.</p>
<h1 id=3D"id-05-JenkinsasDockerContainers-LocalDockerRegistry"><span class=
=3D"confluence-embedded-file-wrapper image-center-wrapper confluence-embedd=
ed-manual-size"><img class=3D"confluence-embedded-image image-center" heigh=
t=3D"198" src=3D"/download/attachments/37487965/image2019-9-23_16-46-50.png=
?version=3D1&amp;modificationDate=3D1569237410000&amp;api=3Dv2" data-image-=
src=3D"/download/attachments/37487965/image2019-9-23_16-46-50.png?version=
=3D1&amp;modificationDate=3D1569237410000&amp;api=3Dv2" data-unresolved-com=
ment-count=3D"0" data-linked-resource-id=3D"37488002" data-linked-resource-=
version=3D"1" data-linked-resource-type=3D"attachment" data-linked-resource=
-default-alias=3D"image2019-9-23_16-46-50.png" data-base-url=3D"https://ico=
n-confluence.iconcr.com" data-linked-resource-content-type=3D"image/png" da=
ta-linked-resource-container-id=3D"37487965" data-linked-resource-container=
-version=3D"9"></span>Local Docker Registry</h1>
<p>This is a lightweight docker container which only runs on the Swarm mast=
er node. The custom image created in the previous stage is pushed to this r=
egistry in order to make it available to all nodes in the docker swarm. The=
 image is automatically published in the registry without any user interven=
tion</p>
<h1 id=3D"id-05-JenkinsasDockerContainers-Terraform">Terraform</h1>
<p>The terraform module is the key component that ties everything together.=
 Each Jenkins container is instantiated as a docker service through the ter=
raform module. It consists of two parts.</p>
<h2 id=3D"id-05-JenkinsasDockerContainers-TerraformModule">Terraform Module=
</h2>
<p>The definition of docker service is coded in the terraform module. The m=
odule defines the following resources used by the docker service.</p>
<ul>
<li>Network</li>
<li>Image</li>
<li>Volume</li>
</ul>
<p>The build process automatically creates a directory for each Jenkins ins=
tance with the terraform code automatically populated. The state for each e=
nvironment is maintained within these directory and it is imperative that i=
t is not tampered with in any form.</p>
<h2 id=3D"id-05-JenkinsasDockerContainers-TerraformvariableFile:">Terraform=
 variable File:</h2>
<p>A terraform.tfvars file is created for each Jenkins instance which consi=
sts of values for the following variables defined within the terraform modu=
le.</p>
<ul>
<li>Project Name</li>
<li>Docker Image Name</li>
<li>Web Interface Port</li>
<li>API Interface Port</li>
</ul>
<p>This file typically looks like this</p>
<h1 id=3D"id-05-JenkinsasDockerContainers-DockerService"><span class=3D"con=
fluence-embedded-file-wrapper image-center-wrapper confluence-embedded-manu=
al-size"><img class=3D"confluence-embedded-image image-center" height=3D"95=
" src=3D"/download/attachments/37487965/image2019-9-23_15-56-28.png?version=
=3D1&amp;modificationDate=3D1569234388000&amp;api=3Dv2" data-image-src=3D"/=
download/attachments/37487965/image2019-9-23_15-56-28.png?version=3D1&amp;m=
odificationDate=3D1569234388000&amp;api=3Dv2" data-unresolved-comment-count=
=3D"0" data-linked-resource-id=3D"37487991" data-linked-resource-version=3D=
"1" data-linked-resource-type=3D"attachment" data-linked-resource-default-a=
lias=3D"image2019-9-23_15-56-28.png" data-base-url=3D"https://icon-confluen=
ce.iconcr.com" data-linked-resource-content-type=3D"image/png" data-linked-=
resource-container-id=3D"37487965" data-linked-resource-container-version=
=3D"9"></span>Docker Service</h1>
<p>The entire process works towards creating the docker service which in tu=
rn spawns the docker container on a free host. The docker service is just a=
 container with definition that govern the container's behaviour. In this c=
ase, the docker service for a Jenkins instance define the image, ports etc =
to be used.</p>
<p><span class=3D"confluence-embedded-file-wrapper image-center-wrapper con=
fluence-embedded-manual-size"><img class=3D"confluence-embedded-image image=
-center" height=3D"142" src=3D"/download/attachments/37487965/image2019-9-2=
3_16-3-35.png?version=3D1&amp;modificationDate=3D1569234815000&amp;api=3Dv2=
" data-image-src=3D"/download/attachments/37487965/image2019-9-23_16-3-35.p=
ng?version=3D1&amp;modificationDate=3D1569234815000&amp;api=3Dv2" data-unre=
solved-comment-count=3D"0" data-linked-resource-id=3D"37487992" data-linked=
-resource-version=3D"1" data-linked-resource-type=3D"attachment" data-linke=
d-resource-default-alias=3D"image2019-9-23_16-3-35.png" data-base-url=3D"ht=
tps://icon-confluence.iconcr.com" data-linked-resource-content-type=3D"imag=
e/png" data-linked-resource-container-id=3D"37487965" data-linked-resource-=
container-version=3D"9"></span></p>
<h1 id=3D"id-05-JenkinsasDockerContainers-DockerContainer">Docker Container=
</h1>
<p>The docker container, with all the values provided in earlier steps, is =
spawned and the Jenkins instance is made available to the users.&nbsp;</p>
<p><span class=3D"confluence-embedded-file-wrapper image-center-wrapper con=
fluence-embedded-manual-size"><img class=3D"confluence-embedded-image image=
-center" height=3D"104" src=3D"/download/attachments/37487965/image2019-9-2=
3_16-15-55.png?version=3D1&amp;modificationDate=3D1569235555000&amp;api=3Dv=
2" data-image-src=3D"/download/attachments/37487965/image2019-9-23_16-15-55=
.png?version=3D1&amp;modificationDate=3D1569235555000&amp;api=3Dv2" data-un=
resolved-comment-count=3D"0" data-linked-resource-id=3D"37487994" data-link=
ed-resource-version=3D"1" data-linked-resource-type=3D"attachment" data-lin=
ked-resource-default-alias=3D"image2019-9-23_16-15-55.png" data-base-url=3D=
"https://icon-confluence.iconcr.com" data-linked-resource-content-type=3D"i=
mage/png" data-linked-resource-container-id=3D"37487965" data-linked-resour=
ce-container-version=3D"9"></span></p>
<h1 id=3D"id-05-JenkinsasDockerContainers-DockerVolume">Docker Volume</h1>
<p>Once the users start creating build jobs, it is important for the data t=
o persist. Default behaviour for docker containers is that the entire conta=
iner file system is deleted when the container is stopped or restarted. To =
mitigate this problem, the Jenkins data is stored on a local file system. S=
pecifically, the container's "/var/jenkins_home" directory and all its cont=
ents are stored on an NFS volume.</p>
<h2 id=3D"id-05-JenkinsasDockerContainers-DatapersistenceacrossSwarm">Data =
persistence across Swarm</h2>
<p>Since the container is managed by docker swarm, it is possible that a gi=
ven Jenkins instance can be created on one node and moved to a different no=
de for various reasons. When this happens, the data created on the previous=
 node will not be available pushing the instance to an inconsistent state. =
To overcome this, a shared NFS volume is setup which will be available acro=
ss all the VM guests which also makes the data available across all swarm n=
odes.</p>
<h1 id=3D"id-05-JenkinsasDockerContainers-VisualizationContainer">Visualiza=
tion Container</h1>
<p>The Visualization container is just a helper container which displays a =
visual of various containers and nodes that are in the Swarm. This can used=
 used to monitor state of various containers within the swarm at real time.=
</p>
<p><span class=3D"confluence-embedded-file-wrapper image-center-wrapper"><i=
mg class=3D"confluence-embedded-image image-center" src=3D"/download/attach=
ments/37487965/image2019-9-23_16-31-41.png?version=3D1&amp;modificationDate=
=3D1569236501000&amp;api=3Dv2" data-image-src=3D"/download/attachments/3748=
7965/image2019-9-23_16-31-41.png?version=3D1&amp;modificationDate=3D1569236=
501000&amp;api=3Dv2" data-unresolved-comment-count=3D"0" data-linked-resour=
ce-id=3D"37487997" data-linked-resource-version=3D"1" data-linked-resource-=
type=3D"attachment" data-linked-resource-default-alias=3D"image2019-9-23_16=
-31-41.png" data-base-url=3D"https://icon-confluence.iconcr.com" data-linke=
d-resource-content-type=3D"image/png" data-linked-resource-container-id=3D"=
37487965" data-linked-resource-container-version=3D"9"></span></p>
<h1 id=3D"id-05-JenkinsasDockerContainers-BuildingAnInstance">Building An I=
nstance</h1>
<p>This section gives a blow by blow of the steps involved in building a ne=
w environment. All the steps given here are performed only on&nbsp;eu-jenki=
np-a002.</p>
<ol>
<li>Create property file
<ol>
<li>Navigate to&nbsp;/app/jenkins/properties</li>
<li>Create a new file with the name, &lt;project_name&gt;.properties and po=
pulate it with relevant details</li>
</ol></li>
<li>Run the build script
<ol>
<li>Navigate to&nbsp;/app/jenkins/builder</li>
<li>Execute&nbsp;master.sh and pass the property file with absolute part as=
 run time parameter
<ol>
<li>./master.sh&nbsp;/app/jenkins/properties/sample.properties</li>
</ol></li>
<li>When the scripts prompts for Yes or No, select Yes to go ahead and depl=
oy the instance</li>
</ol></li>
</ol>
<h2 id=3D"id-05-JenkinsasDockerContainers-deployer.sh">deployer.sh</h2>
<p>The deployer.sh file internally calls three other bash scripts all of wh=
ich are in&nbsp;/app/jenkins/builder/.</p>
<ul>
<li>image_builder.sh: This creates the custom image for the instance</li>
<li>terraform_builder.sh: This creates the terraform module for the instanc=
e and populates terraform.tfvars with relevant details</li>
<li>deployer.sh: Deploys the terraform code and creates the docker service<=
/li>
</ul>
<h1 id=3D"id-05-JenkinsasDockerContainers-NextPhase">Next Phase</h1>
<p>While the setup is complete, there is tremendous scope for improvement. =
Following modifications are in the pipeline.</p>
<ol>
<li>Add CPU, memory restrictions to the docker service</li>
<li>Migrate from Dockerfile based image creation to Packer</li>
</ol>
<p><br></p>
<p><br></p>
    </div>
</body>
</html>
------=_Part_37495_1312434814.1570351071222--
